-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ParamEst_NN_normalize_ap_fixed_ap_fixed_16_6_5_3_0_PARAMEST_NN_config18_s is
port (
    ap_ready : OUT STD_LOGIC;
    data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of ParamEst_NN_normalize_ap_fixed_ap_fixed_16_6_5_3_0_PARAMEST_NN_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_BA00 : STD_LOGIC_VECTOR (23 downto 0) := "000000001011101000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv24_55C8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000101010111001000";
    constant ap_const_lv24_87B0 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000011110110000";
    constant ap_const_lv24_100 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_const_lv24_F100 : STD_LOGIC_VECTOR (23 downto 0) := "000000001111000100000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal y_fu_82_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln54_fu_90_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_1_fu_106_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln54_fu_114_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln54_1_fu_118_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_2_fu_134_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln54_1_fu_142_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln54_2_fu_146_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_3_fu_162_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln54_3_fu_170_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_4_fu_186_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln54_4_fu_194_p2 : STD_LOGIC_VECTOR (23 downto 0);


begin



    add_ln54_1_fu_118_p2 <= std_logic_vector(signed(sext_ln54_fu_114_p1) + signed(ap_const_lv24_55C8));
    add_ln54_2_fu_146_p2 <= std_logic_vector(signed(sext_ln54_1_fu_142_p1) + signed(ap_const_lv24_87B0));
    add_ln54_3_fu_170_p2 <= std_logic_vector(unsigned(y_3_fu_162_p3) + unsigned(ap_const_lv24_100));
    add_ln54_4_fu_194_p2 <= std_logic_vector(unsigned(y_4_fu_186_p3) + unsigned(ap_const_lv24_F100));
    add_ln54_fu_90_p2 <= std_logic_vector(unsigned(y_fu_82_p3) + unsigned(ap_const_lv24_BA00));
    ap_ready <= ap_const_logic_1;
    ap_return_0 <= add_ln54_fu_90_p2(23 downto 8);
    ap_return_1 <= add_ln54_1_fu_118_p2(23 downto 8);
    ap_return_2 <= add_ln54_2_fu_146_p2(23 downto 8);
    ap_return_3 <= add_ln54_3_fu_170_p2(23 downto 8);
    ap_return_4 <= add_ln54_4_fu_194_p2(23 downto 8);
        sext_ln54_1_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_2_fu_134_p3),24));

        sext_ln54_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_1_fu_106_p3),24));

    y_1_fu_106_p3 <= (data_1_val & ap_const_lv7_0);
    y_2_fu_134_p3 <= (data_2_val & ap_const_lv7_0);
    y_3_fu_162_p3 <= (data_3_val & ap_const_lv8_0);
    y_4_fu_186_p3 <= (data_4_val & ap_const_lv8_0);
    y_fu_82_p3 <= (data_0_val & ap_const_lv8_0);
end behav;
